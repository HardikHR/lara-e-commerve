php artisan cache:clear && php artisan config:clear && php artisan route:clear && php artisan view:clear && php artisan event:clear
php artisan passport:client --personal
php artisan passport:client --password


<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\Model;

class DynamicCrudController extends Controller
{
    protected $model;

    public function __construct(Model $model)
    {
        $this->model = $model;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $data = $this->model::all();
        return view(strtolower(class_basename($this->model)) . '.index', compact('data'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view(strtolower(class_basename($this->model)) . '.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $request->validate($this->model->validationRules());

        $this->model::create($request->all());
        return redirect()->route(strtolower(class_basename($this->model)) . '.index')
            ->with('success', 'Resource created successfully.');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $data = $this->model::findOrFail($id);
        return view(strtolower(class_basename($this->model)) . '.show', compact('data'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $data = $this->model::findOrFail($id);
        return view(strtolower(class_basename($this->model)) . '.edit', compact('data'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $request->validate($this->model->validationRules());

        $data = $this->model::findOrFail($id);
        $data->update($request->all());

        return redirect()->route(strtolower(class_basename($this->model)) . '.index')
            ->with('success', 'Resource updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $data = $this->model::findOrFail($id);
        $data->delete();

        return redirect()->route(strtolower(class_basename($this->model)) . '.index')
            ->with('success', 'Resource deleted successfully.');
    }
}


<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $fillable = ['title', 'body'];

    public static function validationRules()
    {
        return [
            'title' => 'required|max:255',
            'body' => 'required',
        ];
    }
}


use App\Models\Post;
use App\Http\Controllers\DynamicCrudController;
Route::resource('posts', DynamicCrudController::class)->parameters(['posts' => 'post'])->middleware('auth');


use App\Models\Comment;
Route::resource('comments', DynamicCrudController::class)->parameters(['comments' => 'comment'])->middleware('auth');